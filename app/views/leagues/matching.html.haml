%h1 Welcome to #{@league.name}
%h2 Let's match
#status

#exit{:style => 'display: none'}
  = form_tag leave_current_match_league_path(@league), :id => "leave_current_match_form" do 
    = submit_tag "Leave current match"

#question

:javascript
  var leagueId = #{@league.id};
  var matchId;
  var retried = 0;
  var currentQuestion;
  var counterHandle;
  var counterTemplate;
  var remainedTime;

  var MAX_RETRIES = 20; 

  var statusHTML = #{javascript_templates(['waiting', 'formed', 'started', 'you_finished'])};

  $(function(){ 
    $('#leave_current_match_form').submit(function(){return confirm("Leave current match?");});
    requestMatch();
  })

  function requestMatch(){
    $.ajax({
      type: 'post',
      url: ["/leagues/", leagueId, "/request_match"].join(""),
      dataType: 'json',
      success: function(data){
        if (data.match_id){
          matchId = data.match_id;
          getMatchInfo();
        } else {
          setStatus('waiting', data);
          setTimeout(requestMatch, 1000);
        }
        resetRetrying();
      },
      error: function(data){
        retry(requestMatch, 500);
      }
    });
  }

  function getMatchInfo(){
    $.ajax({
      type: 'post',
      url: ["/matches/", matchId, "/infor"].join(""),
      dataType: 'json',
      success: function(data){
        updateMatchInfo(data);
        resetRetrying();
      },
      error: function(data){
        retry(getMatchInfo, 500);
      }
    });
   }

  function updateMatchInfo(info){
    if (info.status){
      setStatus(info.status, info);
      switch (info.status){
        case 'formed':
          showCounter('formed', info.seconds_until_started);
          break;
        case 'you_finished':
          setTimeout(getMatchInfo, 1000);
          showCounter('you_finished', info.seconds_until_ended);
          break;
        case 'started':
          showCounter('started', info.seconds_until_ended);
          break;
      }
    }

    if (info.question){
      setQuestion(info.question_type, info.question, info.current_question_position);
    } else clearQuestion();
  }

  function showCounter(template, time){
    if (counterHandle) {clearTimeout(counterHandle);}
    remainedTime = time;
    counterTemplate = template;
    counterHandle = setTimeout(refreshCounter, 1000); 
  }

  function refreshCounter(){
   if (remainedTime== 0){
      getMatchInfo();
    } else {
      remainedTime--;
      var params;
      if (counterTemplate == 'formed'){
        params = { seconds_until_started: remainedTime}
      } else {
        params = { seconds_until_ended: remainedTime}
      }
      setStatus(counterTemplate, params);
      counterHandle = setTimeout(refreshCounter, 1000);
    }
  }

  function submitAnswer(answer){
    var data = {
      position: currentQuestionPosition
    } 
    if (answer != null) data.answer = answer;

    $.ajax({
      type: 'post',
      url: ["/matches/", matchId, "/submit_answer_and_get_next_question"].join(""),
      dataType: 'json',
      data: data,
      success: function(data){
        updateMatchInfo(data);
      },
      error: function(data){
        retry(function(){submitAnswer(answer)}, 100);
      }
    })
  }

  function retry(ajaxMethod, interval){
    if (retried < MAX_RETRIES){
      retried++;
      setTimeout(ajaxMethod, interval);
    }
  }

  function resetRetrying(){
    retried = 0;
  }

  function setStatus(status, params){
    if (status == 'finished') {
      window.location = params['match_result_url'];
    } else {
      var html = statusHTML[status];
      for (var key in params){
        html = html.replace(new RegExp('{'+key+'}', 'g'), params[key]);
      }
      $('#status').html(html);
      if (status == "waiting")
        $('#exit').hide();
      else
        $('#exit').show();
    }
  }

  function setQuestion(questionType, question, position){
    $('#question').html(question);
    currentQuestionPosition = position
    switch(questionType){
      case 'MultipleChoice':
        $('#question button').click(function(event){
          submitAnswer($(this).attr('answer'));
        });
        break;
      case 'FollowPattern': 
        $('#question form').submit(function(event){
          var self = this;
          setTimeout(function(){
            submitAnswer($(self).find('#answer').val());
          });
          return false;
        });
        break;
    }
    $('#question #ignore').click(function(event){
      submitAnswer(null);
    });
  }

  function clearQuestion(){
    $('#question').empty();
  }
