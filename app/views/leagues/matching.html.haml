- @title = @league.name
.matching
  .left
    .internal
      #status
      #match_players{:style => 'display: none'}
        %h3= t '.Players'
        %ul.list
      #exit{:style => 'display: none'}
        = form_tag leave_current_match_league_path(@league), :id => "leave_current_match_form" do 
          = submit_tag t('.leave_current_match'), :class => "sad"

    .internal
      #league_other_active_players
        %h3= t '.League_other_active_players'
        .no_players{:style => 'display:none'}= t '.Some_maybe_around'
        %ul.list{:style => 'display:none'}
  .right
    #question
:javascript
  var leagueId = #{@league.id};
  var questionsPerMatch = #{Matching.questions_per_match};
  var questionsPerCacheBlock = #{Matching.questions_per_cache_block};
  var questionsRefillThreshold = #{Matching.questions_refill_threshold};
  var statusRecheckInterval = #{Matching.status_recheck_interval} * 1000;
  var requestingMatchInfo = false;
  var matchId;
  var retried = 0;
  var currentQuestionPosition;
  var questions = [];
  var counterHandle;
  var remainedTime;
  var loadingMoreQuestions = false;
  var questionsLoadedCallback;
  var statusChanged = false;
  var currentStatus;

  var MAX_RETRIES = 20; 

  var statusHTML = #{['waiting', 'formed', 'started', 'you_finished'].inject({}){|hash, key| hash[key] = t "matches.#{key}"; hash}.to_json};
  var avatarHTML = #{render(:partial => "users/avatar", :locals => { :avatar_size => '{avatar_size}', :avatar_url => '{avatar_url}', :text => '{text}'}).to_json};

  $(function(){ 
    $('#leave_current_match_form').submit(function(){return confirm("Leave current match?");});
    requestMatch();
  })

  function requestMatch(){
    $.ajax({
      type: 'post',
      url: ["/#{I18n.locale}/leagues/", leagueId, "/request_match"].join(""),
      dataType: 'json',
      success: function(data){
        if (data.match_id){
          matchId = data.match_id;
          requestMatchInfo();
        } else {
          setStatus('waiting', data);
          setTimeout(requestMatch, 1000);
        }
        setLeagueOtherActivePlayers(data.other_active_players);
        resetRetrying();
      },
      error: function(data){
        retry(requestMatch, 500);
      }
    });
  }

  function requestCurrentQuestion(callback){
    if (currentQuestionPosition >= questions.length){
      loadMoreQuestions(function(){ requestCurrentQuestion(callback) });
    } else {
      callback(questions[currentQuestionPosition]);
      if (currentQuestionPosition >= questions.length - questionsRefillThreshold) {
        loadMoreQuestions(null);
      }
    }
  }

  function loadMoreQuestions(callback){
    if (callback != null) questionsLoadedCallback = callback; 
    if (!loadingMoreQuestions){
      $.ajax({
        type: 'post',
        url: ["/#{I18n.locale}/matches/", matchId, "/more_questions"].join(""),
        data: {
          loaded: questions.length
        },
        dataType: 'json',
        beforeSend: function(){
          loadingMoreQuestions = true;
        },
        success:function(data){
          questions = questions.concat(data);
          if (questionsLoadedCallback) {
            var c = questionsLoadedCallback;
            questionsLoadedCallback = null;
            c();
          }
          resetRetrying();
        },
        error: function(data){
          retry(function(){
            loadMoreQuestions(callback)
          }, 500);
        },
        complete: function(){
          loadingMoreQuestions = false;
        }
      });
    }
  }


  function requestMatchInfo(){
    if (!requestingMatchInfo) {
      $.ajax({
        type: 'post',
        url: ["/#{I18n.locale}/matches/", matchId, "/infor"].join(""),
        dataType: 'json',
        beforeSend: function(){ requestingMatchInfo = true; },
        complete: function(){ requestingMatchInfo = false; },
        success: function(data){
          setMatchInfo(data);
          resetRetrying();
        },
        error: function(data){
          retry(requestMatchInfo, 500);
        }
      });
    }
   }

  function setMatchInfo(info){
    if (info.status){
      setStatus(info.status, info);
      switch (info.status){
        case 'formed':
          showCounter(info.seconds_until_started);
          break;
        case 'you_finished':
          showCounter(info.seconds_until_ended);
          break;
        case 'started':
          showCounter(info.seconds_until_ended);
          break;
        default:
          stopCounter();
      }
    }

    if (statusChanged){
      if (info.status == 'started'){
        //switch from no question -> current questions
        currentQuestionPosition = info.current_question_position
        requestCurrentQuestion(setQuestion);
      } else clearQuestion();
    }

    setPlayers(info.players, info.status);
    setTimeout(requestMatchInfo, statusRecheckInterval);
  }

  function stopCounter(){
    if (counterHandle) {clearTimeout(counterHandle);}
  }

  function showCounter(time){
    stopCounter();
    remainedTime = time;
    counterHandle = setTimeout(refreshCounter, 1000); 
  }

  function refreshCounter(){
   if (remainedTime== 0){
      requestMatchInfo();
    } else {
      remainedTime--;
      var params;
      if (currentStatus == 'formed'){
        params = { seconds_until_started: remainedTime}
      } else {
        params = { seconds_until_ended: remainedTime}
      }
      setStatus(currentStatus, params);
      counterHandle = setTimeout(refreshCounter, 1000);
    }
  }

  function submitAnswer(answer){
    disableQuestionButtonsAndInputs();
    var data = {
      position: currentQuestionPosition
    } 
    if (answer != null) data.answer = answer;

    $.ajax({
      type: 'post',
      url: ["/#{I18n.locale}/matches/", matchId, "/submit_answer"].join(""),
      dataType: 'json',
      data: data,
      success: function(){
        if (currentQuestionPosition == questionsPerMatch) requestMatchInfo();
      },
      error: function(data){
        retry(function(){submitAnswer(answer)}, 100);
      }
    })

    currentQuestionPosition++;
    if (currentQuestionPosition < questionsPerMatch){
      requestCurrentQuestion(setQuestion);
    }
  }

  function retry(ajaxMethod, interval){
    if (retried < MAX_RETRIES){
      retried++;
      setTimeout(ajaxMethod, interval);
    }
  }

  function resetRetrying(){
    retried = 0;
  }

  function highlightPattern(input){
    var hint = $(input).attr('hint');
    var val = $(input).val();
    function span(ch, clazz){
      return ["<span class='", clazz, "'>", ch, "</span>"].join("");
    }

    var parts = [];
    for (var i = 0; i < Math.max(hint.length, val.length); i++){
      if (i >= val.length){
        parts.push(span(hint.charAt(i), "gray"));
      } else if (i >= hint.length){
        parts.push(span(val.charAt(i), "purple"));
      } else if (hint.charAt(i) == '*') {
        parts.push(span('*', "green"));
      } else if (hint.charAt(i) == val.charAt(i)){
        parts.push(span(hint.charAt(i) == ' ' ? '_' : hint.charAt(i), "green"));
      } else {/*hint.charAt(i) != val.charAt(i)*/
        parts.push(span(hint.charAt(i) == ' ' ? '_' : hint.charAt(i), "red"));
      }
    }

    $('#question #hint').html(parts.join(""));
  }

  function formatString(template, variables){
    var formatted = template;
    for (var key in variables){
      formatted = formatted.replace(new RegExp('{'+key+'}', 'g'), variables[key]);
    }
    return formatted;
  }

  function setLeagueOtherActivePlayers(otherActivePlayers){
    if (otherActivePlayers.length == 0){
      $('#league_other_active_players').find('.no_players').show();
      $('#league_other_active_players').find('.list').hide();
    } else {
      $('#league_other_active_players').find('.no_players').hide();
      $('#league_other_active_players').find('.list').empty().show();
      $.each(otherActivePlayers, function(index, player){
        $('#league_other_active_players ul.list').append(formatString(avatarHTML, $.extend({}, player, { text: player.display_name, avatar_size: 32 } )));
      });
    }
  }

  function setStatus(status, params){
    statusChanged = (status != currentStatus);
    currentStatus = status;
    if (status == 'finished') {
      window.location = params['match_result_url'];
    } else {
      $('#status').html(formatString(statusHTML[status], params));
      if (status == "waiting")
        $('#exit, #match_players').hide();
      else
        $('#exit, #match_players').show();
    }
  }

  function setPlayers(players, status){
    $('#match_players ul.list').empty();
    $.each(players, function(index, player){
      var text = [player.display_name];
      if (status != 'formed'){
        if (player.current_question_position == questionsPerMatch) {
          text.push(" (finished)");
        } else {
          text = text.concat([" (", player.current_question_position + 1, "/", questionsPerMatch, ")"]);
        }
      }
      html = formatString(avatarHTML, $.extend({}, player, { avatar_size: 40, text: text.join("") }));
      $('#match_players ul.list').append(html);
    });
  }

  function setQuestion(question){
    $('#question').html(question.content);
    setUpQuestionButtons(question.type);
  }

  function setUpQuestionButtons(questionType){
    switch(questionType){
      case 'MultipleChoice':
        $('#question button.option').click(function(event){
          submitAnswer($(this).attr('answer'));
        });
        break;
      case 'FollowPattern': 
        $('#question form').submit(function(event){
          var self = this;
          setTimeout(function(){
            submitAnswer($(self).find('#answer').val());
          });
          return false;
        });

        $('#question #answer').keyup(function(event){
          highlightPattern(this);
        }).keyup();
        break;
    }
    $('#question #ignore').click(function(event){
      submitAnswer(null);
    });
  }

  function disableQuestionButtonsAndInputs(){
    $('#question').find('button, input').attr('disabled', 'disabled');
  }

  function clearQuestion(){
    $('#question').empty();
  }
